{
  "name": "node-validator",
  "description": "A simple, extensible object property validator for node.js. Supports express.js.",
  "version": "0.1.4",
  "homepage": "https://bitbucket.org/gregbacchus/node-validator/overview",
  "keywords": [
    "validator",
    "validation",
    "express",
    "check",
    "test",
    "request-validation"
  ],
  "repository": {
    "type": "git",
    "url": "https://bitbucket.org/gregbacchus/node-validator.git"
  },
  "main": "lib/validator.js",
  "scripts": {},
  "dependencies": {
    "moment": "~2.4.0"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "readme": "# node-validator\r\n\r\n_node-validator_ is a simple, extensible object property validator for node.js\r\n\r\nIt includes direct support for express.js, and can be used as express middleware to automatically validating request body content.\r\n\r\n## Example\r\n```javascript\r\nvar validator = require('node-validator');\r\n\r\nvar checkChild = validator.isObject()\r\n  .withRequired('prop', validator.isString({ regex: /^[abc]+$/ }));\r\n\r\nvar check = validator.isObject()\r\n  .withRequired('_id', validator.isString({ regex: /^[abc]+$/ }))\r\n  .withOptional('date', validator.isIsoDate())\r\n  .withOptional('children', validator.isArray(checkChild, {min: 1}));\r\n\r\nvar toValidate = {\r\n  _id: 'abababa',\r\n  date: '2013-10-24',\r\n  children: [{\r\n    prop: 'zxzx'\r\n  }]\r\n};\r\n\r\nvalidator.run(check, toValidate, function(errorCount, errors) {\r\n  // will return:\r\n  // errorCount=1\r\n  // errors=[{\"parameter\":\"children[0].prop\",\"value\":\"zxzx\",\"message\":\"Invalid value. Value must match required pattern.\"}]\r\n});\r\n```\r\n\r\nOr using express.js\r\n\r\n```javascript\r\napp.post('/', [validator.express(check), function(req, res) {\r\n  // ...\r\n}\r\n```\r\n\r\nIf the body content does not pass the given validation check, the validator will return.\r\n\r\n```\r\n400 Bad Request\r\n\r\n{\r\n    \"errors\": [\r\n        {\r\n            \"parameter\": \"children[0].prop\",\r\n            \"value\": \"zxzx\",\r\n            \"message\": \"Invalid value. Value must match required pattern.\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## Installation\r\n\r\n    $ npm install node-validator\r\n\r\n## Included Validators\r\n\r\nFollowing are the build-in validators. You may also use your own, see section below.\r\n\r\n### isObject\r\n\r\nUsed to validate that the item under test is an object, and to check it's properties. This is often the root validator.\r\n\r\nProperty requirements are chained to the `isObject` validator.\r\n\r\n```javascript\r\nvar check = validator.isObject()\r\n  .withRequired('requiredProperty', propertyValidator1)\r\n  .withOptional('optionalProperty', propertyValidator2);\r\n```\r\n\r\nIf any properties are present in the object under test that are not listed, this will fail the validation.\r\n\r\nThe property validators may be any other validator, including `isObject`, or may omitted to allow any value.\r\n\r\n### isString\r\n\r\nMakes sure the item is of type string, also can check the value against a regular expression.\r\n\r\n```javascript\r\nvar check = validator.isString();\r\n```\r\nor\r\n```javascript\r\nvar check = validator.isString({regex: /[0-9A-Fa-f]+/});\r\n```\r\n\r\n### isNumber\r\n\r\nMakes sure the item is a number, also can specify minimum and maximum values.\r\n\r\n```javascript\r\nvar check = validator.isNumber();\r\n```\r\nor\r\n```javascript\r\nvar check = validator.isNumber({min: 0, max: 78});\r\n```\r\n\r\n### isInteger\r\n\r\nMakes sure the item is a whole number (integer), also can specify minimum and maximum values.\r\n\r\n```javascript\r\nvar check = validator.isInteger();\r\n```\r\nor\r\n```javascript\r\nvar check = validator.isInteger({min: 0, max: 78});\r\n```\r\n\r\n### isDate\r\n\r\nChecks for a `Date` object or a string that is moment.js can parse.\r\n\r\n```javascript\r\nvar check = validator.isDate();\r\n```\r\n\r\nOptionally, the moment.js format can be passed through to specify a particular format\r\n\r\n```javascript\r\nvar check = validator.isDate();\r\n```\r\nor\r\n```javascript\r\nvar check = validator.isDate({format: 'LT'});\r\n```\r\n\r\n### isIsoDate\r\n\r\nA shortcut for `validator.isDate({format: 'YYYY-MM-DD'})`\r\n\r\n### isAnyObject\r\n\r\nMakes sure that the item is of type `Object`, but doesn't validate any properties.\r\n\r\n### isArray\r\n\r\nMakes sure that the item is of type array, and validates the items. Also can specify minimum and maximum length of the array.\r\n\r\n```javascript\r\nvar check = validator.isArray(validator.isDate());\r\n```\r\nor\r\n```javascript\r\nvar check = validator.isArray(validator.isDate(), {min: 3});\r\n```\r\n\r\n## Your Own Validators\r\n\r\nYou may use your own validators. All that is required is a function that meets the below requirements.\r\n\r\n```javascript\r\nfunction myValidator(value, onError) {\r\n  ...\r\n}\r\n```\r\n\r\nWhere `value` is the item under test, and `onError` is a function to call with any validation errors. It has the signature:\r\n\r\n```javascript\r\nfunction onError(message,propertyName,propertyValue) {\r\n  ...\r\n}\r\n```\r\n\r\nExample: to make sure that there can not be both properties `foo` and `bar`\r\n\r\n```javascript\r\nfunction validateFooXorBar(value, onError) {\r\n  if (value.foo !== undefined && value.bar !== undefined) {\r\n    onError('both foo and bar may not be defined', 'foo|bar', null);\r\n  }\r\n}\r\n```\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2013\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "node-validator@0.1.4",
  "dist": {
    "shasum": "6ba421e83d0ce03ef5e6c96af007a32ca9c91a87"
  },
  "_from": "node-validator@",
  "_resolved": "https://registry.npmjs.org/node-validator/-/node-validator-0.1.4.tgz"
}
